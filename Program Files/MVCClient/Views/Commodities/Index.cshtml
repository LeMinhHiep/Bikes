@model MVCClient.ViewModels.CommonTasks.CommodityViewModel

@using (Html.BeginForm())
{
    @Html.AntiForgeryToken()

    <div class="div-main">      

        <div class="div-left">
            <div style="margin-bottom: 10px;">
                @(Html.Kendo().DropDownList()
                      .Name("filterCommodity")
                      .DataTextField("Text")
                      .DataValueField("Value")                      
                      .HtmlAttributes(new { style = "width: 210px; text-align: left;" })
                      .BindTo(new List<SelectListItem>()
                      {                          
                          new SelectListItem() {
                            Text = "Phân loại xe, phụ tùng", Value ="00001"
                          },
                          new SelectListItem() {
                            Text = "Phân loại hàng hóa", Value ="00002"
                          }
                      })
                    .Events(events => events.Change("filterCommodity_Change"))
                )
            </div>

            <div id="div-category" >
                @(Html.Kendo().TreeView()
                .Name("treeviewCategory")
                 //.HtmlAttributes(new { @class = "" })
                .ExpandAll(false)
                .DataTextField("Name")
                .DataSource(dataSource => dataSource
                    .Read(read => read
                        .Action("CommodityCategoriesForTreeView", "CommodityCategoriesApi")
                    )
                )
                .Events(events => events.Change("treeviewCategory_Change"))
                )

                <input id="texttreeviewCategory" value="0" style="display:none" />
                
            </div>

            <div id="div-type" style="display: none">
                @(Html.Kendo().TreeView()
                .Name("treeviewType")
                //.HtmlAttributes(new { @class = "" })
                .ExpandAll(false)
                .DataTextField("Name")
                .DataSource(dataSource => dataSource
                    .Read(read => read
                        .Action("CommodityTypesForTreeView", "CommodityTypesApi")
                    )
                )
                .Events(events => events.Change("treeviewType_Change"))
                )
                <input id="texttreeviewType" value="0" style="display:none" />
            </div>
                
        </div>

        <div class="div-right">
            @(Html.Kendo().Grid<MVCDTO.CommonTasks.CommodityPrimitiveDTO>()
            .Name("kendoGridIndex")
            .Columns(columns =>
            {
                columns.Bound(p => p.CommodityID).DisplayNameTitle().Hidden();
                columns.Bound(p => p.Code).DisplayNameTitle().Width(100);
                columns.Bound(p => p.Name).DisplayNameTitle().Width(140);
                columns.Bound(p => p.OfficialName).DisplayNameTitle().Width(140);
                columns.Bound(p => p.OriginalName).DisplayNameTitle().Width(140);
                columns.Bound(p => p.ListedPrice).DisplayNameTitle().Width(100).Format("{0:n0}").Filterable(false);
                columns.Bound(p => p.GrossPrice).DisplayNameTitle().Width(100).Format("{0:n0}").Filterable(false);
                columns.Bound(p => p.Remarks).DisplayNameTitle().Filterable(false).Width(100).Hidden();
                columns.Template(model => null).Width(80)
               .ClientTemplate("<a href='" + Url.RouteUrl("Default", new { controller = "Commodities", action = "Edit" }) + "/#= CommodityID #'>Edit</a>");
            })
            .ToolBar(toolbar => toolbar.Custom().Action("Create", "Commodities"))
            .Pageable()
            .Groupable()
            .Filterable()
            .Selectable()
            .Sortable()
            .Events(e =>
            {
                e.DataBound("hightLightSelectedRow");
            })
            .DataSource(dataSource => dataSource
                .Ajax()
                .Read(read => read.Action("GetCommodities", "CommoditiesApi").Data("onAdditionalCommodityGridData"))
                //.Events(events => events.Error("onError"))
                .PageSize(30)
                .Model(model =>
                {
                    model.Id(x => x.CommodityID);
                    model.Field(m => m.CommodityID).DefaultValue(0);
                })
            .ServerOperation(true)
                ).HtmlAttributes(new { @class = "grid-class" }))
        </div>
    </div>
}

<link href="@Url.Content("~/Content/CustomCss/CommonsIndex.css")" rel="stylesheet" type="text/css" />

<script type="text/javascript">

    function onAdditionalCommodityGridData(e) {    
        return {//Send parameter to controller search action
            commodityCategoryID: $("#texttreeviewCategory").val(),
            commodityTypeID: $("#texttreeviewType").val()
        };
    }

    filterCommodity_Change = function (e) {        
        var dataItem = this.dataItem(e.item);
        if (dataItem.Value != undefined) {
            $("#div-category").css("display", dataItem.Value == "00001" ? "block" : "none");
            $("#div-type").css("display", dataItem.Value == "00002" ? "block" : "none");            
        }
        else {
            $("#div-category").css("display", "block");
        }
    }

    treeviewCategory_Change = function (e) {
        var treeview = $("#treeviewCategory").data("kendoTreeView");
        var id = treeviewChange(treeview);        

        $("#texttreeviewCategory").val(id);
        $("#texttreeviewType").val(0);        

        $("#kendoGridIndex").data("kendoGrid").dataSource.read();
    }

    treeviewType_Change = function (e) {
        var treeview = $("#treeviewType").data("kendoTreeView");
        var id = treeviewChange(treeview);

        $("#texttreeviewCategory").val(0);
        $("#texttreeviewType").val(id);

        $("#kendoGridIndex").data("kendoGrid").dataSource.read();
    }

    function treeviewChange(treeview) {        
        var selectedNode = treeview.select();

        var id = -1;
        if (selectedNode.length != 0) {
            var item = treeview.dataItem(selectedNode);
            id = item.id;
        }
        return id;
    }

    function hightLightSelectedRow(e) {
        require(["kindexGrid"], function (kindexGrid) {
            var kindexGridInstance = new kindexGrid("kendoGridIndex");
            kindexGridInstance.setSelectedRow("CommodityID", "@ViewBag.SelectedEntityID");
        });
    }
</script>
