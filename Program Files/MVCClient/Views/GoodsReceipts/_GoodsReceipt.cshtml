@model MVCClient.ViewModels.StockTasks.GoodsReceiptViewModel
@using MVCBase.Enums;

<div id="div-form">
    @using (Html.BeginForm())
    {
        @Html.AntiForgeryToken()

        <div id="popupWindow"></div>

        <div class="div-main">

            @Html.HiddenFor(model => model.GoodsReceiptID)
            @Html.HiddenFor(model => model.GoodsReceiptTypeID)
            @Html.HiddenFor(model => model.VoucherID)
            @Html.HiddenFor(model => model.TotalQuantity)
            @Html.HiddenFor(model => model.TotalAmount)
            @Html.HiddenFor(model => model.TotalVATAmount)
            @Html.HiddenFor(model => model.TotalGrossAmount)

            @Html.HiddenFor(model => model.SubmitTypeOption)

            <div class="div-left">
                <div class="form-group1">
                    @Html.LabelFor(model => model.EntryDate, htmlAttributes: new { @class = "control-label-left" })
                    <div class="div-input">
                        @Html.Kendo().DateTimePickerFor(model => model.EntryDate).HtmlAttributes(new { @class = "input-class" })
                        @Html.ValidationMessageFor(model => model.EntryDate, "", new { @class = "text-danger" })
                    </div>
                </div>

                <div class="form-group1">
                    @Html.LabelFor(model => model.Reference, htmlAttributes: new { @class = "control-label-left" })
                    <div class="div-input">
                        @Html.Kendo().MaskedTextBoxFor(model => model.Reference).HtmlAttributes(new { @class = "input-class", @readonly = "readonly" })
                        @Html.ValidationMessageFor(model => model.Reference, "", new { @class = "text-danger" })
                    </div>
                </div>

            </div>


            <div class="div-right">
                <div class="contract-separator">
                    <div id="warehouse-div" class="customer-background">
                        <div class="div-row2 customer-lmargin" style="padding-top: 60px;">
                            <div class="div-row3">
                                <div class="div-input" style="margin-left: 0px;">
                                    @Html.Kendo().MaskedTextBoxFor(model => model.VoucherText1).HtmlAttributes(new { @class = "input-class1", @readonly = "readonly" })
                                </div>
                                <div class="div-row3">
                                    <div class="div-input" style="margin-left: 0px; margin-top: 4px;">
                                        <a href="javascript:void(0)" style="margin-left: 46px; color:black;"><img id="img-birthday" src="~/Content/Images/New/PersonIcon.png" title="Người đại diện" /> <label id="voucherText2" class="label-description" style="width:70px;">@Model.VoucherText2</label></a>
                                        <a href="javascript:void(0)" style="margin-left: 2px; color:black;"><img id="img-telephone" src="~/Content/Images/New/Telephone.png" title="Điện thoại" /> <label id="voucherText3" class="label-description">@Model.VoucherText3</label></a>
                                    </div>
                                </div>
                                <div class="div-row2">
                                    <label id="voucherText4" class="label-description">@Model.VoucherText4</label>
                                </div>
                            </div>
                        </div>
                        <div class="div-row2 customer-lmargin" style="padding-top: 20px;">
                            <label id="voucherText5" class="label-description" style=" margin-top: 10px;">@Model.VoucherText5</label>
                        </div>
                    </div>
                </div>

                <div>
                    @(Html.Kendo().Grid(Model.GoodsReceiptViewDetails)
                        .Name("kendoGridDetails")
                        .Columns(columns =>
                        {
                            columns.Template(t => { }).Title("&nbsp;").ClientTemplate("#= RowNumber(data) #").Width(35).Title("Stt");

                            columns.Bound(p => p.GoodsReceiptDetailID).DisplayNameTitle().Filterable(false).Hidden()
                                .ClientTemplate("#= GoodsReceiptDetailID #" + "<input type='hidden' name='GoodsReceiptViewDetails[#= index(data) #].GoodsReceiptDetailID' value='#= GoodsReceiptDetailID #' />");
                            columns.Bound(p => p.GoodsReceiptID).DisplayNameTitle().Filterable(false).Hidden()
                                .ClientTemplate("#= GoodsReceiptID #" + "<input type='hidden' name='GoodsReceiptViewDetails[#= index(data) #].GoodsReceiptID' value='#= GoodsReceiptID #' />");
                            columns.Bound(p => p.GoodsReceiptTypeID).DisplayNameTitle().Filterable(false).Hidden()
                                .ClientTemplate("#= GoodsReceiptTypeID #" + "<input type='hidden' name='GoodsReceiptViewDetails[#= index(data) #].GoodsReceiptTypeID' value='#= GoodsReceiptTypeID #' />");
                            columns.Bound(p => p.VoucherID).DisplayNameTitle().Filterable(false).Hidden()
                                .ClientTemplate("#= VoucherID #" + "<input type='hidden' name='GoodsReceiptViewDetails[#= index(data) #].VoucherID' value='#= VoucherID #' />");
                            columns.Bound(p => p.VoucherDetailID).DisplayNameTitle().Filterable(false).Hidden()
                                .ClientTemplate("#= VoucherDetailID #" + "<input type='hidden' name='GoodsReceiptViewDetails[#= index(data) #].VoucherDetailID' value='#= VoucherDetailID #' />");

                            columns.Bound(p => p.SupplierID).DisplayNameTitle().Filterable(false).Hidden()
                                .ClientTemplate("#= (SupplierID == null)? '' : SupplierID #" + "<input type='hidden' name='GoodsReceiptViewDetails[#= index(data) #].SupplierID' value='#= (SupplierID == null) ? '' : SupplierID #' />");

                            columns.Bound(p => p.CommodityID).DisplayNameTitle().Filterable(false).Hidden()
                                .ClientTemplate("#= CommodityID #" + "<input type='hidden' name='GoodsReceiptViewDetails[#= index(data) #].CommodityID' value='#= CommodityID #' />");
                            columns.Bound(p => p.CommodityCode).DisplayNameTitle().Filterable(false).Width(90).HtmlAttributes(new { style = "" }).Hidden()
                                .ClientTemplate("#= CommodityCode #" + "<input type='hidden' name='GoodsReceiptViewDetails[#= index(data) #].CommodityCode' value='#= CommodityCode #' />");
                            columns.Bound(p => p.CommodityName).DisplayNameTitle().Filterable(false).Width(200)
                                .ClientFooterTemplate("Tổng cộng:")
                                .ClientTemplate("#= CommodityName #" +
                                        "<div class = 'multiline-grid'> #= CommodityCode #</div>" + //"<div class = 'multiline-grid'> #= Origin #</div>" + "<div class = 'multiline-grid'> #= Packing #</div>" +
                                        "<input type='hidden' name='GoodsReceiptViewDetails[#= index(data) #].CommodityName' value='#= CommodityName #' />");


                            columns.Bound(p => p.CommodityTypeID).DisplayNameTitle().Filterable(false).Hidden()
                                .ClientTemplate("#= CommodityTypeID #" + "<input type='hidden' name='GoodsReceiptViewDetails[#= index(data) #].CommodityTypeID' value='#= CommodityTypeID #' />");


                            columns.Bound(p => p.Origin).DisplayNameTitle().Filterable(false).Hidden()
                                .ClientTemplate("#= (Origin == null) ? '' : Origin #" + "<input type='hidden' name='GoodsReceiptViewDetails[#= index(data) #].Origin' value='#= (Origin == null) ? '' : Origin #' />");
                            columns.Bound(p => p.Packing).DisplayNameTitle().Filterable(false).Hidden()
                                .ClientTemplate("#= (Packing == null) ? '' : Packing #" + "<input type='hidden' name='GoodsReceiptViewDetails[#= index(data) #].Packing' value='#= (Packing == null) ? '' : Packing #' />");



                            columns.Bound(p => p.QuantityRemains).DisplayNameTitle().Filterable(false).Width(50).HtmlAttributes(new { @class = "grid-number-column" })
                                .Format("{0:n0}")
                                .ClientFooterTemplate("#= kendo.format('{0:n0}', sum) #")
                                .ClientTemplate("#= QuantityRemains #" + "<input type='hidden' name='GoodsReceiptViewDetails[#= index(data) #].QuantityRemains' value='#= QuantityRemains #' />");
                            columns.Bound(p => p.Quantity).DisplayNameTitle().Filterable(false).Width(50).HtmlAttributes(new { @class = "grid-number-column" })
                                .Format("{0:n0}")
                                .ClientFooterTemplate("#= kendo.format('{0:n0}', sum) #")
                                .ClientTemplate("#= Quantity #" + "<input type='hidden' name='GoodsReceiptViewDetails[#= index(data) #].Quantity' value='#= Quantity #' />");
                            columns.Bound(p => p.QuantityIssue).DisplayNameTitle().Width(50).Filterable(false).HtmlAttributes(new { @class = "grid-number-column" }).Hidden()
                                .Format("{0:n0}")
                                .ClientTemplate("#= kendo.toString(QuantityIssue, 'n0') #" + "<input type='hidden' name='GoodsReceiptViewDetails[#= index(data) #].QuantityIssue' value='#= QuantityIssue #' />");


                            columns.Bound(p => p.UnitPrice).DisplayNameTitle().Width(90).Filterable(false).HtmlAttributes(new { @class = "grid-number-column" }).Hidden()
                                .Format("{0:n0}")
                                .ClientTemplate("#= kendo.format('{0:n0}', UnitPrice) #" + "<input type='hidden' name='GoodsReceiptViewDetails[#= index(data) #].UnitPrice' value='#= UnitPrice #' />");
                            columns.Bound(p => p.Amount).DisplayNameTitle().Width(90).Filterable(false).HtmlAttributes(new { @class = "grid-number-column" }).Hidden()
                                .Format("{0:n0}")
                                .ClientFooterTemplate("#= kendo.format('{0:n0}', sum) #")
                                .ClientTemplate("#= kendo.format('{0:n0}', Amount) #" + "<input type='hidden' name='GoodsReceiptViewDetails[#= index(data) #].Amount' value='#= Amount #' />");

                            columns.Bound(p => p.VATPercent).DisplayNameTitle().Filterable(false).Width(50).HtmlAttributes(new { @class = "grid-number-column" }).Hidden()
                                .Format("{0:n0}")
                                .ClientTemplate("#= kendo.format('{0:n0}%', VATPercent) #"
                                        + "<input type='hidden' name='GoodsReceiptViewDetails[#= index(data) #].VATPercent' value='#= VATPercent #' />");
                            columns.Bound(p => p.VATAmount).DisplayNameTitle().Width(90).Filterable(false).HtmlAttributes(new { @class = "grid-number-column" }).Hidden()
                                .Format("{0:n0}")
                                .ClientFooterTemplate("#= kendo.format('{0:n0}', sum) #")
                                .ClientTemplate("#= kendo.format('{0:n0}', VATAmount) #" + "<input type='hidden' name='GoodsReceiptViewDetails[#= index(data) #].VATAmount' value='#= VATAmount #' />");

                            columns.Bound(p => p.GrossPrice).DisplayNameTitle().Width(90).Filterable(false).HtmlAttributes(new { @class = "grid-number-column" }).Hidden()
                                .Format("{0:n0}")
                                .ClientTemplate("#= kendo.format('{0:n0}', GrossPrice) #" + "<input type='hidden' name='GoodsReceiptViewDetails[#= index(data) #].GrossPrice' value='#= GrossPrice #' />");

                            columns.Bound(p => p.GrossAmount).DisplayNameTitle().Width(90).Filterable(false).HtmlAttributes(new { @class = "grid-number-column" }).Hidden()
                                .Format("{0:n0}")
                                .ClientFooterTemplate("#= kendo.format('{0:n0}', sum) #")
                                .ClientTemplate("#= kendo.format('{0:n0}', GrossAmount) #" + "<input type='hidden' name='GoodsReceiptViewDetails[#= index(data) #].GrossAmount' value='#= GrossAmount #' />");


                            columns.Bound(p => p.WarehouseID).DisplayNameTitle().Filterable(false).Hidden()
                                .ClientTemplate("#= WarehouseID #" + "<input type='hidden' name='GoodsReceiptViewDetails[#= index(data) #].WarehouseID' value='#= WarehouseID #' />");
                            columns.Bound(p => p.WarehouseCode).DisplayNameTitle().Filterable(false).Width(120).EditorTemplateName(@Model.GoodsReceiptTypeID == (int)GlobalEnums.GoodsReceiptTypeID.StockTransfer ? "StringReadonly" : "NMVN/WarehouseAutoComplete")
                                .ClientTemplate("#= (WarehouseCode == null) ? '' : WarehouseCode #" + "<input type='hidden' name='GoodsReceiptViewDetails[#= index(data) #].WarehouseCode' value='#= (WarehouseCode == null) ? '' : WarehouseCode #' />");


                            columns.Bound(p => p.ChassisCode).DisplayNameTitle().Filterable(false).EditorTemplateName(@Model.GoodsReceiptTypeID == (int)GlobalEnums.GoodsReceiptTypeID.StockTransfer ? "StringReadonly" : "String")
                                .ClientTemplate("#= (ChassisCode == null) ? '' : ChassisCode #" + "<input type='hidden' name='GoodsReceiptViewDetails[#= index(data) #].ChassisCode' value='#= (ChassisCode == null) ? '' : ChassisCode #' />");
                            columns.Bound(p => p.EngineCode).DisplayNameTitle().Filterable(false).EditorTemplateName(@Model.GoodsReceiptTypeID == (int)GlobalEnums.GoodsReceiptTypeID.StockTransfer ? "StringReadonly" : "String")
                                .ClientTemplate("#= (EngineCode == null) ? '' : EngineCode #" + "<input type='hidden' name='GoodsReceiptViewDetails[#= index(data) #].EngineCode' value='#= (EngineCode == null) ? '' : EngineCode #' />");
                            columns.Bound(p => p.ColorCode).DisplayNameTitle().Filterable(false).EditorTemplateName(@Model.GoodsReceiptTypeID == (int)GlobalEnums.GoodsReceiptTypeID.StockTransfer ? "StringReadonly" : "String")
                                .ClientTemplate("#= (ColorCode == null)? '' : ColorCode #" + "<input type='hidden' name='GoodsReceiptViewDetails[#= index(data) #].ColorCode' value='#= (ColorCode == null) ? '' : ColorCode #' />");


                            columns.Bound(p => p.Remarks).DisplayNameTitle().Filterable(false).Hidden()
                                .ClientTemplate("#= (Remarks == null)? '' : Remarks #" + "<input type='hidden' name='GoodsReceiptViewDetails[#= index(data) #].Remarks' value='#= (Remarks == null) ? '' : Remarks #' />");

                            columns.Command(command => { command.Destroy().Text("<span class='command' ></span>"); }).Width(50);
                        })
                        .Filterable()
                        .Navigatable()
                        .ToolBar(toolbar =>
                        {
                            //Add a functionless button for display purpose only
                            toolbar.Template(
                                @<text>
                                    <div>
                                        @(Html.Kendo().Button()
                                                .Name("iconButton")
                                                .HtmlAttributes(new { type = "button" })
                                                .SpriteCssClass("k-icon k-i-ungroup") //.Content("My button label")
                                        )
                                    </div>
                                </text>);
                        })

                        .Editable(editable => { editable.Enabled(Model.Editable); editable.Mode(GridEditMode.InCell).DisplayDeleteConfirmation(true).CreateAt(GridInsertRowPosition.Bottom); })

                        .Selectable(settings =>
                        {
                            settings.Mode(GridSelectionMode.Multiple);
                            settings.Type(GridSelectionType.Row);
                        })
                        .Events(events =>
                        {
                            events.DataBinding(@<text> function(e) {rowNumber = 0;} </text>);
                            //events.Change("kendoGridDetails_Change");
                        })
                        .DataSource(dataSource => dataSource
                            .Ajax()
                            .Batch(true)
                            .ServerOperation(false)
                            .Model(model =>
                            {
                                model.Id(x => x.GoodsReceiptDetailID);
                                model.Field(m => m.GoodsReceiptDetailID).DefaultValue(0);
                                model.Field(m => m.GoodsReceiptID).DefaultValue(@Model.GoodsReceiptID);
                                model.Field(m => m.QuantityRemains).DefaultValue(0);
                                model.Field(m => m.Quantity).DefaultValue(0);
                                model.Field(m => m.QuantityIssue).DefaultValue(0);
                            })
                            .Events(events =>
                            {
                                events.Error("kendGrid_ErrorHandler");
                            })
                            .Aggregates(a => a.Add(x => x.QuantityRemains).Sum())
                            .Aggregates(a => a.Add(x => x.Quantity).Sum())
                            .Aggregates(a => a.Add(x => x.Amount).Sum())
                            .Aggregates(a => a.Add(x => x.VATAmount).Sum())
                            .Aggregates(a => a.Add(x => x.GrossAmount).Sum())
                            )
                    )

                </div>

                <div style="margin-top:10px;">
                    @(Html.Kendo().PanelBar()
                    .Name("IntroPanelBar")
                    .Items(items =>
                    {
                        items.Add()
                            .Text("Thông tin khác")
                            .Selected(true)
                            .Expanded(false)
                            .Content(@<text>
                                <div class="div-panel-left">
                                    <div class="div-row">
                                        @Html.LabelFor(model => model.Remarks, htmlAttributes: new { @class = "control-label1" })
                                        <div class="div-input">
                                            @Html.Kendo().MaskedTextBoxFor(model => model.Remarks).HtmlAttributes(new { @class = "input-class1" })
                                        </div>
                                        <div class="div-validation-message">
                                            @Html.ValidationMessageFor(model => model.Remarks, "", new { @class = "text-danger" })
                                        </div>
                                    </div>

                                    <div class="div-row">
                                        @Html.LabelFor(model => model.Description, htmlAttributes: new { @class = "control-label1" })
                                        <div class="div-input">
                                            @Html.Kendo().MaskedTextBoxFor(model => model.Description).HtmlAttributes(new { @class = "input-class1" })
                                        </div>
                                        <div class="div-validation-message">
                                            @Html.ValidationMessageFor(model => model.Description, "", new { @class = "text-danger" })
                                        </div>
                                    </div>


                                </div>
                                <div class="div-panel-right">
                                    @Html.Partial("~/Views/Helpers/Commons/_PreparedPersonDropDown.cshtml")
                                    @Html.Partial("~/Views/Helpers/Commons/_ApproverDropDown.cshtml")
                                </div>

                            </text>).HtmlAttributes(new { @class = "panel-class" });
                    })
                    )
                </div>

            </div>


            <div class="div-button">
                @if (Model.Editable)
                {
                    <input id="closedSubmitButton" type="submit" formaction="@Url.Action("Edit", "GoodsReceipts")" value="Save" class="k-button custom-button" />
                    <input id="submitCreateWizard" style="display:none" type="submit" formaction="@Url.Action("Edit", "GoodsReceipts")" value="submitCreateWizard" class="k-button custom-button cancel" />
                }
            </div>
            @Html.Partial("~/Views/Helpers/Commons/_ViewHeader.cshtml")
        </div>
    }
</div>


<link href="@Url.Content("~/Content/CustomCss/FourColumn.css")" rel="stylesheet" type="text/css" />
<script src="@Url.Content("~/Scripts/Helpers/KendoGrid/gridHelper.js")"></script>








<script type="text/javascript">
    $("#PurchaseOrderReference").dblclick(function (e) {

        var popupWindow = $("#popupWindow");
        var mywindow = CreatePopUp("Chọn đơn đặt hàng", "650px", "550px", popupWindow);

        if (mywindow != null) {
            var url = "@Url.Action("CreateWizard", "GoodsReceipts")";

            mywindow.center().open();
            mywindow.refresh(url);
        }
    });

</script>

