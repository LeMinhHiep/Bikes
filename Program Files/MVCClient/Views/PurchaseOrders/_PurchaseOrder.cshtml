@model MVCClient.ViewModels.PurchaseTasks.PurchaseOrderViewModel

<div id="div-form">
    @using (Html.BeginForm())
    {
        @Html.AntiForgeryToken()


        <div class="div-main">

            @Html.HiddenFor(model => model.PurchaseOrderID)
            @Html.HiddenFor(model => model.SupplierID)
            @Html.HiddenFor(model => model.TotalQuantity)
            @Html.HiddenFor(model => model.TotalAmount)
            @Html.HiddenFor(model => model.TotalVATAmount)
            @Html.HiddenFor(model => model.TotalGrossAmount)

            @Html.HiddenFor(model => model.SubmitTypeOption)

            <div class="div-left">
                <div class="form-group1">
                    @Html.LabelFor(model => model.EntryDate, htmlAttributes: new { @class = "control-label-left" })
                    <div class="div-input">
                        @Html.Kendo().DateTimePickerFor(model => model.EntryDate).HtmlAttributes(new { @class = "input-class" })
                        @Html.ValidationMessageFor(model => model.EntryDate, "", new { @class = "text-danger" })
                    </div>
                </div>

                <div class="form-group1">
                    @Html.LabelFor(model => model.Reference, htmlAttributes: new { @class = "control-label-left" })
                    <div class="div-input">
                        @Html.Kendo().MaskedTextBoxFor(model => model.Reference).HtmlAttributes(new { @class = "input-class", @readonly = "readonly" })
                        @Html.ValidationMessageFor(model => model.Reference, "", new { @class = "text-danger" })
                    </div>
                </div>

                <div class="form-group1">
                    <div class="div-label">
                        @Html.LabelFor(model => model.ConfirmDate, htmlAttributes: new { @class = "control-label-left" })
                    </div>
                    <div class="div-input">
                        @Html.Kendo().DatePickerFor(model => model.ConfirmDate).HtmlAttributes(new { @class = "input-class" })
                        @Html.ValidationMessageFor(model => model.ConfirmDate, "", new { @class = "text-danger" })
                    </div>
                </div>

                <div class="form-group1">
                    <div class="div-label">
                        @Html.LabelFor(model => model.ConfirmReference, htmlAttributes: new { @class = "control-label-left" })
                    </div>
                    <div class="div-input">
                        @Html.Kendo().MaskedTextBoxFor(model => model.ConfirmReference).HtmlAttributes(new { @class = "input-class" })
                        @Html.ValidationMessageFor(model => model.ConfirmReference, "", new { @class = "text-danger" })
                    </div>
                </div>

                <div class="form-group1">
                    @Html.LabelFor(model => model.AttentionName, htmlAttributes: new { @class = "control-label-left" })
                    <div class="div-input">
                        @Html.Kendo().MaskedTextBoxFor(model => model.AttentionName).HtmlAttributes(new { @class = "input-class" })
                        @Html.ValidationMessageFor(model => model.AttentionName, "", new { @class = "text-danger" })
                    </div>
                </div>
                <div class="form-group1">
                    @Html.LabelFor(model => model.Description, htmlAttributes: new { @class = "control-label-left" })
                    <div class="div-input">
                        @Html.Kendo().MaskedTextBoxFor(model => model.Description).HtmlAttributes(new { @class = "input-class" })
                        @Html.ValidationMessageFor(model => model.Description, "", new { @class = "text-danger" })
                    </div>
                </div>


            </div>

            <div class="div-right">
                <div class="contract-separator">
                    @Html.Partial("~/Views/Purchases/_NoOrderInvoice.cshtml")
                </div>

                <div>
                    @(Html.Kendo().Grid(Model.PurchaseOrderDetails)
                        .Name("kendoGridDetails")
                        .Columns(columns =>
                        {
                            columns.Template(t => { }).Title("&nbsp;").ClientTemplate("#= RowNumber(data) #").Width(35);


                            columns.Bound(p => p.PurchaseOrderDetailID).DisplayNameTitle().Filterable(false).Hidden()
                                .ClientTemplate("#= PurchaseOrderDetailID #" + "<input type='hidden' name='PurchaseOrderDetails[#= index(data) #].PurchaseOrderDetailID' value='#= PurchaseOrderDetailID #' />");
                            columns.Bound(p => p.PurchaseOrderID).DisplayNameTitle().Filterable(false).Hidden()
                               .ClientTemplate("#= PurchaseOrderID #" + "<input type='hidden' name='PurchaseOrderDetails[#= index(data) #].PurchaseOrderID' value='#= PurchaseOrderID #' />");


                            columns.Bound(p => p.CommodityID).DisplayNameTitle().Filterable(false).Hidden()
                                .ClientTemplate("#= CommodityID #" + "<input type='hidden' name='PurchaseOrderDetails[#= index(data) #].CommodityID' value='#= CommodityID #' />");
                            columns.Bound(p => p.CommodityCode).DisplayNameTitle().Filterable(false).Width(90).HtmlAttributes(new { style = "" }).Hidden()
                                .ClientTemplate("#= CommodityCode #" + "<input type='hidden' name='PurchaseOrderDetails[#= index(data) #].CommodityCode' value='#= CommodityCode #' />");
                            columns.Bound(p => p.CommodityName).DisplayNameTitle().Filterable(false).Width(200)
                                .ClientFooterTemplate("Tổng cộng:")
                                .ClientTemplate("#= CommodityName #" +
                                        "<div class = 'multiline-grid'> #= CommodityCode #</div>" + //"<div class = 'multiline-grid'> #= Origin #</div>" + "<div class = 'multiline-grid'> #= Packing #</div>" +
                                        "<input type='hidden' name='PurchaseOrderDetails[#= index(data) #].CommodityName' value='#= CommodityName #' />");


                            columns.Bound(p => p.CommodityTypeID).DisplayNameTitle().Filterable(false).Hidden()
                                .ClientTemplate("#= CommodityTypeID #" + "<input type='hidden' name='PurchaseOrderDetails[#= index(data) #].CommodityTypeID' value='#= CommodityTypeID #' />");
                            
                            columns.Bound(p => p.Origin).DisplayNameTitle().Filterable(false).Hidden()
                              .ClientTemplate("#= (Origin == null) ? '' : Origin #" + "<input type='hidden' name='PurchaseOrderDetails[#= index(data) #].Origin' value='#= (Origin == null) ? '' : Origin #' />");
                            columns.Bound(p => p.Packing).DisplayNameTitle().Filterable(false).Hidden()
                               .ClientTemplate("#= (Packing == null) ? '' : Packing #" + "<input type='hidden' name='PurchaseOrderDetails[#= index(data) #].Packing' value='#= (Packing == null) ? '' : Packing #' />");



                            columns.Bound(p => p.Quantity).DisplayNameTitle().Filterable(false).Width(50).HtmlAttributes(new { @class = "grid-number-column" })
                                .Format("{0:n0}")
                                .ClientFooterTemplate("#= kendo.format('{0:n0}', sum) #")
                                .ClientTemplate("#= kendo.format('{0:n0}', Quantity) #" + "<input type='hidden' name='PurchaseOrderDetails[#= index(data) #].Quantity' value='#= Quantity #' />");
                            columns.Bound(p => p.UnitPrice).DisplayNameTitle().Width(100).Filterable(false).HtmlAttributes(new { @class = "grid-number-column" })
                                .Format("{0:n0}")
                                .ClientTemplate("#= kendo.format('{0:n0}', UnitPrice) #" + "<input type='hidden' name='PurchaseOrderDetails[#= index(data) #].UnitPrice' value='#= UnitPrice #' />");
                            columns.Bound(p => p.Amount).DisplayNameTitle().Width(100).Filterable(false).HtmlAttributes(new { @class = "grid-number-column" })
                                .Format("{0:n0}")
                                .ClientFooterTemplate("#= kendo.format('{0:n0}', sum) #")
                                .ClientTemplate("#= kendo.format('{0:n0}', Amount) #" + "<input type='hidden' name='PurchaseOrderDetails[#= index(data) #].Amount' value='#= Amount #' />");

                            columns.Bound(p => p.VATPercent).DisplayNameTitle().Filterable(false).Width(50).HtmlAttributes(new { @class = "grid-number-column" })
                                .Format("{0:n0}")
                                .ClientTemplate("#= kendo.format('{0:n0}%', VATPercent) #" +
                                        "<input type='hidden' name='PurchaseOrderDetails[#= index(data) #].VATPercent' value='#= VATPercent #' />");
                            columns.Bound(p => p.VATAmount).DisplayNameTitle().Width(100).Filterable(false).HtmlAttributes(new { @class = "grid-number-column" })
                                .Format("{0:n0}")
                                .ClientFooterTemplate("#= kendo.format('{0:n0}', sum) #")
                                .ClientTemplate("#= kendo.format('{0:n0}', VATAmount) #" + "<input type='hidden' name='PurchaseOrderDetails[#= index(data) #].VATAmount' value='#= VATAmount #' />");

                            columns.Bound(p => p.GrossPrice).DisplayNameTitle().Width(100).Filterable(false).HtmlAttributes(new { @class = "grid-number-column" })
                                .Format("{0:n0}")
                                .ClientTemplate("#= kendo.format('{0:n0}', GrossPrice) #" + "<input type='hidden' name='PurchaseOrderDetails[#= index(data) #].GrossPrice' value='#= GrossPrice #' />");

                            columns.Bound(p => p.GrossAmount).DisplayNameTitle().Width(100).Filterable(false).HtmlAttributes(new { @class = "grid-number-column" })
                                .Format("{0:n0}")
                                .ClientFooterTemplate("#= kendo.format('{0:n0}', sum) #")
                                .ClientTemplate("#= kendo.format('{0:n0}', GrossAmount) #" + "<input type='hidden' name='PurchaseOrderDetails[#= index(data) #].GrossAmount' value='#= GrossAmount #' />");

                            columns.Bound(p => p.Remarks).DisplayNameTitle().Filterable(false).Hidden()
                                .ClientTemplate("#= (Remarks == null)? '' : Remarks #" + "<input type='hidden' name='PurchaseOrderDetails[#= index(data) #].Remarks' value='#= (Remarks == null) ? '' : Remarks #' />");



                            columns.Bound(p => p.ChassisCode).DisplayNameTitle().Filterable(false).Hidden()
                              .ClientTemplate("#= (ChassisCode == null) ? '' : ChassisCode #" + "<input type='hidden' name='PurchaseOrderDetails[#= index(data) #].ChassisCode' value='#= (ChassisCode == null) ? '' : ChassisCode #' />");
                            columns.Bound(p => p.EngineCode).DisplayNameTitle().Filterable(false).Hidden()
                                .ClientTemplate("#= (EngineCode == null) ? '' : EngineCode #" + "<input type='hidden' name='PurchaseOrderDetails[#= index(data) #].EngineCode' value='#= (EngineCode == null) ? '' : EngineCode #' />");
                            columns.Bound(p => p.ColorCode).DisplayNameTitle().Filterable(false).Hidden()
                                .ClientTemplate("#= (ColorCode == null)? '' : ColorCode #" + "<input type='hidden' name='PurchaseOrderDetails[#= index(data) #].ColorCode' value='#= (ColorCode == null) ? '' : ColorCode #' />");


                            columns.Command(command => { command.Destroy().Text("<span class='command' ></span>"); }).Width(50);
                        })
                        .Filterable()
                        .Navigatable()
                        .ToolBar(toolbar =>
                        {
                            if (Model.Editable)
                            {     
                                toolbar.Create();
                            }
                            else
                            {//Add a functionless button for display purpose only
                                toolbar.Template(
                                    @<text>
                                        <div>
                                            @(Html.Kendo().Button()
                                                .Name("iconButton")
                                                .HtmlAttributes(new { type = "button" })
                                                .SpriteCssClass("k-icon k-i-ungroup") //.Content("My button label")
                                            )
                                        </div>
                                    </text>);
                            }
                        })

                        .Editable(editable => { editable.Enabled(Model.Editable); editable.Mode(GridEditMode.InCell).DisplayDeleteConfirmation(true).CreateAt(GridInsertRowPosition.Bottom); })
                        .Selectable(settings =>
                        {
                            settings.Mode(GridSelectionMode.Multiple);
                            settings.Type(GridSelectionType.Row);
                        })
                        .Events(events =>
                        {
                            events.DataBinding(@<text> function(e) {rowNumber = 0;} </text>);
                        })
                        .DataSource(dataSource => dataSource
                            .Ajax()
                            .Batch(true)
                            .ServerOperation(false)
                            .Model(model =>
                            {
                                model.Id(x => x.PurchaseOrderDetailID);
                                model.Field(m => m.PurchaseOrderDetailID).DefaultValue(0);
                                model.Field(m => m.PurchaseOrderID).DefaultValue(@Model.PurchaseOrderID);
                                model.Field(m => m.Quantity).DefaultValue(0);
                            })
                            .Events(events =>
                            {
                                events.Error("kendGrid_ErrorHandler");
                            })
                            .Aggregates(a => a.Add(x => x.Quantity).Sum())
                            .Aggregates(a => a.Add(x => x.Amount).Sum())
                            .Aggregates(a => a.Add(x => x.VATAmount).Sum())
                            .Aggregates(a => a.Add(x => x.GrossAmount).Sum())
                        )
                    )

                </div>

                <div class="panel-div">
                    @(Html.Kendo().PanelBar()
                    .Name("IntroPanelBar")
                    .Items(items =>
                    {
                        items.Add()
                            .Text("Thông tin khác")
                            .Selected(true)
                            .Expanded(false)
                            .Content(@<text>
                                <div class="div-panel-left">
                                    <div class="div-row">
                                        @Html.LabelFor(model => model.Remarks, htmlAttributes: new { @class = "control-label1" })
                                        <div class="div-input">
                                            @Html.Kendo().MaskedTextBoxFor(model => model.Remarks).HtmlAttributes(new { @class = "input-class1" })
                                        </div>
                                        <div class="div-validation-message">
                                            @Html.ValidationMessageFor(model => model.Remarks, "", new { @class = "text-danger" })
                                        </div>
                                    </div>

                                    @Html.Partial("~/Views/Helpers/Commons/_PriceTermDropDown.cshtml")
                                    @Html.Partial("~/Views/Helpers/Commons/_PaymentTermDropDown.cshtml")
                                </div>
                                <div class="div-panel-right">
                                    @Html.Partial("~/Views/Helpers/Commons/_PreparedPersonDropDown.cshtml")
                                    @Html.Partial("~/Views/Helpers/Commons/_ApproverDropDown.cshtml")
                                </div>


                            </text>).HtmlAttributes(new { @class = "panel-class" });
                    })
                    )
                </div>

            </div>

            
            <div class="div-button">
                @if (Model.Editable)
                { 
                    <input id="closedSubmitButton" type="submit" value="Save" class="k-button custom-button" />
                }
            </div>
            @Html.Partial("~/Views/Helpers/Commons/_ViewHeader.cshtml")
            @if (Model.Editable)
            {
                <div><input type="file" name="xlfile" id="xlf" /></div>
            }
        </div>
    }

</div>

<link href="@Url.Content("~/Content/CustomCss/FourColumn.css")" rel="stylesheet" type="text/css" />
<script src="@Url.Content("~/Scripts/Helpers/KendoGrid/gridHelper.js")"></script>

<script src="@Url.Content("~/Scripts/Controllers/Root/PurchaseOrders/ImportExcel.js")"></script>

<script>
    window.urlCommoditiesApi = '@Url.Action("GetCommoditiesByCode", "CommoditiesApi")';
</script>