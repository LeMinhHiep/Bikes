@using MVCBase.Enums;
@using MVCClient.Configuration

@model MVCClient.ViewModels.SalesTasks.QuotationViewModel

<div id="div-form">
    @using (Html.BeginForm())
    {
        @Html.AntiForgeryToken()

        @Html.HiddenFor(model => model.QuotationID)
        @Html.HiddenFor(model => model.TotalQuantity)
        @Html.HiddenFor(model => model.TotalAmount)
        @Html.HiddenFor(model => model.TotalVATAmount)
        @Html.HiddenFor(model => model.TotalGrossAmount)
        @Html.HiddenFor(model => model.AverageDiscountPercent)

        @Html.HiddenFor(model => model.SubmitTypeOption)

        <div id="popupWindow"></div>

        <div class="div-main">

            <div class="div-left">

                <div class="form-group1">
                    @Html.LabelFor(model => model.EntryDate, htmlAttributes: new { @class = "control-label-left" })
                    <div class="div-input">
                        @Html.Kendo().DateTimePickerFor(model => model.EntryDate).HtmlAttributes(new { @class = "input-class" })
                        @Html.ValidationMessageFor(model => model.EntryDate, "", new { @class = "text-danger" })
                    </div>
                </div>

                <div class="form-group1">
                    @Html.LabelFor(model => model.Reference, htmlAttributes: new { @class = "control-label-left" })
                    <div class="div-input">
                        @Html.Kendo().MaskedTextBoxFor(model => model.Reference).HtmlAttributes(new { @class = "input-class", @readonly = "readonly" })
                        @Html.ValidationMessageFor(model => model.Reference, "", new { @class = "text-danger" })
                    </div>
                </div>

            </div>

            <div class="div-right">
                <div class="contract-separator">
                    @Html.Partial("~/Views/SalesInvoices/_ContractibleInvoice.cshtml")
                </div>




                <div>
                    @(Html.Kendo().Grid(Model.QuotationViewDetails)
                        .Name("kendoGridDetails")
                        .Columns(columns =>
                        {
                            columns.Template(t => { }).Title("&nbsp;").ClientTemplate("#= RowNumber(data) #").Width(35);


                            columns.Bound(p => p.QuotationDetailID).DisplayNameTitle().Filterable(false).Hidden()
                                .ClientTemplate("#= QuotationDetailID #" + "<input type='hidden' name='QuotationViewDetails[#= index(data) #].QuotationDetailID' value='#= QuotationDetailID #' />");
                            columns.Bound(p => p.QuotationID).DisplayNameTitle().Filterable(false).Hidden()
                                .ClientTemplate("#= QuotationID #" + "<input type='hidden' name='QuotationViewDetails[#= index(data) #].QuotationID' value='#= QuotationID #' />");


                            columns.Bound(p => p.CommodityID).DisplayNameTitle().Filterable(false).Hidden()
                                .ClientTemplate("#= CommodityID #" + "<input type='hidden' name='QuotationViewDetails[#= index(data) #].CommodityID' value='#= CommodityID #' />");
                            columns.Bound(p => p.CommodityCode).DisplayNameTitle().Filterable(false).Width(90).HtmlAttributes(new { style = "" }).Hidden()
                                .ClientTemplate("#= CommodityCode #" + "<input type='hidden' name='QuotationViewDetails[#= index(data) #].CommodityCode' value='#= CommodityCode #' />");
                            columns.Bound(p => p.CommodityName).DisplayNameTitle().Filterable(false).Width(200)
                                .ClientFooterTemplate("Tổng cộng:")
                                .ClientTemplate("#= CommodityName #" +
                                        "<div class = 'multiline-grid'> #= CommodityCode # </div>" +
                                        "<div class = 'isWarrantyClaim'> #= (IsWarrantyClaim == true) ? '[Khiếu nại bảo hành]' : '' #</div>" +
                                        "<div class = 'isBonus'> #= (IsWarrantyClaim == false && IsBonus == true) ? '[Quà tặng]' : '' #</div>" +
                                        "<input type='hidden' name='QuotationViewDetails[#= index(data) #].CommodityName' value='#= CommodityName #' />");


                            columns.Bound(p => p.CommodityTypeID).DisplayNameTitle().Filterable(false).Hidden()
                                .ClientTemplate("#= CommodityTypeID #" + "<input type='hidden' name='QuotationViewDetails[#= index(data) #].CommodityTypeID' value='#= CommodityTypeID #' />");
                            

                            columns.Bound(p => p.QuantityAvailable).DisplayNameTitle().Filterable(false).HtmlAttributes(new { @class = "grid-number-column" }).Width(50)
                                .Format("{0:n0}")
                                .ClientTemplate("#= kendo.format('{0:n0}', QuantityAvailable) #" + "<input type='hidden' name='QuotationViewDetails[#= index(data) #].QuantityAvailable' value='#= QuantityAvailable #' />");
                            columns.Bound(p => p.Quantity).DisplayNameTitle().Filterable(false).HtmlAttributes(new { @class = "grid-number-column" }).Width(50)
                                .Format("{0:n0}")
                                .ClientFooterTemplate("#= kendo.format('{0:n0}', sum) #")
                                .ClientTemplate("#= kendo.format('{0:n0}', Quantity) #" + "<input type='hidden' name='QuotationViewDetails[#= index(data) #].Quantity' value='#= Quantity #' />");
                            columns.Bound(p => p.ListedPrice).DisplayNameTitle().Filterable(false).HtmlAttributes(new { @class = "grid-number-column" }).Width(90)
                                .Format("{0:n0}")
                                .ClientTemplate("#= kendo.format('{0:n0}', ListedPrice) #" + "<input type='hidden' name='QuotationViewDetails[#= index(data) #].ListedPrice' value='#= ListedPrice #' />");

                            columns.Bound(p => p.DiscountPercent).DisplayNameTitle().Filterable(false).Width(50).HtmlAttributes(new { @class = "grid-number-column" })
                               .Format("{0:n1}%")
                               .ClientFooterTemplate("#= kendo.format('{0:n1}%', average) #")
                               .ClientTemplate("#= kendo.format('{0:n1}%', DiscountPercent) #" + "<input type='hidden' name='QuotationViewDetails[#= index(data) #].DiscountPercent' value='#= DiscountPercent #' />");

                            columns.Bound(p => p.UnitPrice).DisplayNameTitle().Filterable(false).HtmlAttributes(new { @class = "grid-number-column" }).Width(90)
                                .Format("{0:n0}")
                               .ClientTemplate("#= kendo.format('{0:n0}', UnitPrice) #" + "<input type='hidden' name='QuotationViewDetails[#= index(data) #].UnitPrice' value='#= UnitPrice #' />");

                            columns.Bound(p => p.Amount).DisplayNameTitle().Filterable(false).HtmlAttributes(new { @class = "grid-number-column" }).Width(90)
                                .Format("{0:n0}")
                                .ClientFooterTemplate("#= kendo.format('{0:n0}', sum) #")
                                .ClientTemplate("#= kendo.format('{0:n0}', Amount) #" + "<input type='hidden' name='QuotationViewDetails[#= index(data) #].Amount' value='#= Amount #' />");

                            columns.Bound(p => p.VATPercent).DisplayNameTitle().Filterable(false).HtmlAttributes(new { @class = "grid-number-column" }).Width(50)
                                .Format("{0:n0}")
                                .ClientTemplate("#= kendo.format('{0:n0}%', VATPercent) #" + "<input type='hidden' name='QuotationViewDetails[#= index(data) #].VATPercent' value='#= VATPercent #' />");
                            columns.Bound(p => p.VATAmount).DisplayNameTitle().Filterable(false).HtmlAttributes(new { @class = "grid-number-column" }).Width(90)
                                .Format("{0:n0}")
                                .ClientFooterTemplate("#= kendo.format('{0:n0}', sum) #")
                                .ClientTemplate("#= kendo.format('{0:n0}', VATAmount) #" + "<input type='hidden' name='QuotationViewDetails[#= index(data) #].VATAmount' value='#= VATAmount #' />");

                            columns.Bound(p => p.GrossPrice).DisplayNameTitle().Filterable(false).HtmlAttributes(new { @class = "grid-number-column" }).Width(90)
                                .Format("{0:n0}")
                                .ClientTemplate("#= kendo.format('{0:n0}', GrossPrice) #" + "<input type='hidden' name='QuotationViewDetails[#= index(data) #].GrossPrice' value='#= GrossPrice #' />");
                            
                            columns.Bound(p => p.GrossAmount).DisplayNameTitle().Filterable(false).HtmlAttributes(new { @class = "grid-number-column" }).Width(90)
                                .Format("{0:n0}")
                                .ClientFooterTemplate("#= kendo.format('{0:n0}', sum) #")
                                .ClientTemplate("#= kendo.format('{0:n0}', GrossAmount) #" + "<input type='hidden' name='QuotationViewDetails[#= index(data) #].GrossAmount' value='#= GrossAmount #' />");

                            columns.Bound(p => p.Remarks).DisplayNameTitle().Filterable(false).Hidden()
                                .ClientTemplate("#= (Remarks == null)? '' : Remarks #" + "<input type='hidden' name='QuotationViewDetails[#= index(data) #].Remarks' value='#= (Remarks == null) ? '' : Remarks #' />");

                            columns.Bound(p => p.IsBonus).DisplayNameTitle().Filterable(false).Hidden()
                                .ClientTemplate("#= (IsBonus == null)? '' : IsBonus #" + "<input type='hidden' name='QuotationViewDetails[#= index(data) #].IsBonus' value='#= (IsBonus == null) ? '' : IsBonus #' />");
                            columns.Bound(p => p.IsWarrantyClaim).DisplayNameTitle().Filterable(false).Hidden()
                                .ClientTemplate("#= (IsWarrantyClaim == null)? '' : IsWarrantyClaim #" + "<input type='hidden' name='QuotationViewDetails[#= index(data) #].IsWarrantyClaim' value='#= (IsWarrantyClaim == null) ? '' : IsWarrantyClaim #' />");

                            columns.Command(command => { command.Destroy().Text("<span class='command' ></span>"); }).Width(50);
                        })
                        .Filterable()
                        .Navigatable()
                        .ToolBar(toolbar =>
                        {
                            toolbar.Create();
                        })

                        .Editable(editable => editable.Mode(GridEditMode.InCell).DisplayDeleteConfirmation(true).CreateAt(GridInsertRowPosition.Bottom))
                        .Selectable(settings =>
                        {
                            settings.Mode(GridSelectionMode.Multiple);
                            settings.Type(GridSelectionType.Row);
                        })
                        .Events(events =>
                        {
                            events.DataBinding(@<text>
                                function(e) {
                                rowNumber = 0;
                                }
                            </text>);
                            @*events.DataBound(@<text>
                                function(e) {
                                var grid = $("#kendoGridDetails").data("kendoGrid");
                                var data = grid.dataSource.data();
                                $.each(data, function (i, row) {
                                var isWarrantyClaim = row.IsWarrantyClaim;
                                if (isWarrantyClaim == true) {
                                $('tr[data-uid="' + row.uid + '"]').css("color", "darkred");
                                }
                                });
                                }
                            </text>);*@
                        })
                        .DataSource(dataSource => dataSource
                            .Ajax()
                            .Batch(true)
                            .ServerOperation(false)
                            .Model(model =>
                            {
                                model.Id(x => x.QuotationDetailID);
                                model.Field(m => m.QuotationDetailID).DefaultValue(0);
                                model.Field(m => m.QuotationID).DefaultValue(@Model.QuotationID);
                                model.Field(m => m.Quantity).DefaultValue(1);
                                model.Field(m => m.DiscountPercent).DefaultValue(0);
                                model.Field(m => m.IsBonus).DefaultValue(false);
                                model.Field(m => m.IsWarrantyClaim).DefaultValue(false);
                            })
                            .Events(events =>
                            {
                                events.Error("kendGrid_ErrorHandler");
                            })
                            .Aggregates(a => a.Add(x => x.Quantity).Sum())
                            .Aggregates(a => a.Add(x => x.DiscountPercent).Average())
                            .Aggregates(a => a.Add(x => x.Amount).Sum())
                            .Aggregates(a => a.Add(x => x.VATAmount).Sum())
                            .Aggregates(a => a.Add(x => x.GrossAmount).Sum())
                        )
                    )






                    <div class="panel-div">
                        @(Html.Kendo().PanelBar()
                            .Name("IntroPanelBar")
                            .Items(items =>
                            {
                                items.Add()
                                    .Text("Thông tin khác")
                                    .Selected(true)
                                    .Expanded(false)
                                    .Content(@<text>
                                        <div class="div-panel-left">
                                            <div class="div-row">
                                                @Html.LabelFor(model => model.Description, htmlAttributes: new { @class = "control-label1" })
                                                <div class="div-input">
                                                    @Html.Kendo().MaskedTextBoxFor(model => model.Description).HtmlAttributes(new { @class = "input-class1" })
                                                </div>
                                                <div class="div-validation-message">
                                                    @Html.ValidationMessageFor(model => model.Description, "", new { @class = "text-danger" })
                                                </div>
                                            </div>

                                            <div class="div-row">
                                                @Html.LabelFor(model => model.Remarks, htmlAttributes: new { @class = "control-label1" })
                                                <div class="div-input">
                                                    @Html.Kendo().MaskedTextBoxFor(model => model.Remarks).HtmlAttributes(new { @class = "input-class1" })
                                                </div>
                                                <div class="div-validation-message">
                                                    @Html.ValidationMessageFor(model => model.Remarks, "", new { @class = "text-danger" })
                                                </div>
                                            </div>

                                           
                                            @Html.Partial("~/Views/Helpers/Commons/_PaymentTermDropDown.cshtml")
                                        </div>
                                        <div class="div-panel-right">
                                            @Html.Partial("~/Views/Helpers/Commons/_PersonInChargeDropDown.cshtml")
                                            @Html.Partial("~/Views/Helpers/Commons/_PreparedPersonDropDown.cshtml")
                                            @Html.Partial("~/Views/Helpers/Commons/_ApproverDropDown.cshtml")
                                        </div>

                                    </text>).HtmlAttributes(new { @class = "panel-class" });
                            })
                        )
                    </div>

                    



                </div>


            </div>


            <div class="div-button">
                <button id="closedSubmitButton" type="submit" formaction="@Url.Action("Edit", "Quotations")" class="k-button custom-button"> <img src="~/Content/Images/New/EditService.png" alt="" /> Save </button>
                <input id="submitCreateWizard" style="display:none" type="submit" formaction="@Url.Action("Edit", "Quotations")" class="k-button custom-button cancel" />

                <input id="submitEditServiceContract" style="display:none" type="submit" formaction="@Url.Action("EditServiceContract", "Quotations")" class="k-button custom-button" />
            </div>
            @Html.Partial("~/Views/Helpers/Commons/_ViewHeader.cshtml")
        </div>
    }

</div>

<link href="@Url.Content("~/Content/CustomCss/FourColumn.css")" rel="stylesheet" type="text/css" />
<script src="@Url.Content("~/Scripts/Helpers/KendoGrid/gridHelper.js")"></script>
